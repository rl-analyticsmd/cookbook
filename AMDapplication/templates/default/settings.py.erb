import base64
import bugsnag
import json
import ldap
import logging
import os
import sys
import re

from datetime import timedelta
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType


# While we are setting up a new instance, we don't need to receive every
# type of notification. By default this is False and can be changed in our
# client config files.
SETUP_MODE = False

# Define the base directory and a few helper variables.
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
LOGIN_URL = '/login'
# The URL to redirect to when two factor is enabled.
DUO_LOGIN_URL = '/duo_login'
LOGIN_REDIRECT_URL = '/metro'

sys.path.insert(0, os.path.join(BASE_DIR, 'decision/marge/src/'))

# Look at our config file to see what type of deployment this is.
configFilePath = os.path.join(BASE_DIR, 'config', 'deploy.config.json')
try:
  with open(configFilePath, 'r') as configFile:
    configJson = json.load(configFile)
    AMD_deployType = configJson['deployType']
    AMD_client = configJson['client']
except IOError:
  print "\n********** ERROR ************"
  print "- error reading 'config/deploy.config.json'"
  print "- if it does not exist, run amdConfig.py to generate it\n"
  raise

# Define our fixture directory.
FIXTURE_DIRS = (os.path.join(BASE_DIR, 'fixtures'),)

# Define the admins of the project.
ADMINS = (
  ('Team', 'servermonitoring@analyticsmd.com'),
)

CUSTOMER_SUCCESS_EMAIL = "cs@analyticsmd.com"

# Define the managers (diff between admins and managers?)
MANAGERS = ADMINS

# Define the email settings
EMAIL_HOST = base64.b64decode(configJson['EMAIL_HOST'])
EMAIL_HOST_USER = base64.b64decode(configJson['EMAIL_HOST_USER'])
EMAIL_HOST_PASSWORD = base64.b64decode(configJson['EMAIL_HOST_PASSWORD'])
EMAIL_PORT = 587
EMAIL_USE_TLS = True

DEFAULT_FROM_EMAIL = 'analyticsMD <do_not_reply@analyticsmd.com>'
SERVER_EMAIL = 'analyticsMD <do_not_reply@analyticsmd.com>'

# Session cookie variables
SESSION_COOKIE_NAME = 'sid'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Encryption Settings
AMD_EXCRYPTION_SUFFIX = ".ssl"

# By default, we want to show all the outside/basic websites:
LOGIN_REDIRECT_ON_INDEX = False

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Los_Angeles'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale
USE_L10N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
#MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
#MEDIA_URL = '/statics/'

# Set the location of the urls file
ROOT_URLCONF = 'urls'

STATIC_URL = '/statics/'
STATIC_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_FINDERS = (
  'django.contrib.staticfiles.finders.AppDirectoriesFinder',
  'django.contrib.staticfiles.finders.FileSystemFinder',
  'compressor.finders.CompressorFinder'
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = base64.b64decode(configJson['SECRET_KEY'])
ALLOWED_HOSTS = [
  '.analyticsmd.com',
  'analyticsmd.stanfordchildrens.org',
  '173.0.1.100',
  'localhost',
  '127.0.0.1'
  # <% @dbserver.each do |appserver| -%>
  #             '<%= appserver['ipaddress']['ec2']['public_ipv4'] -%>'
  #          <% end -%>

INTERNAL_IPS = [
  "127.0.0.1",
  "73.231.161.116", # Emilie Tan apartment IP
  "73.189.35.161",  # 520 san antonio ip address.
  "73.92.193.39" # Brent's IP address at home
  # "52.88.237.26" # proxy server address
]

# Declare the template directories
TEMPLATE_DIRS = (
    os.path.join(BASE_DIR, 'templates'),
    os.path.join(BASE_DIR, 'metro', 'templates'),
    os.path.join(BASE_DIR, 'config'),  # Welcome emails, etc. All the client specific stuff :/
    os.path.join(BASE_DIR, 'ideate', 'templates'),
    os.path.join(BASE_DIR, 'ideate', 'templates', 'email'),
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

JSTEMPLATE_DIRS = (
  os.path.join(BASE_DIR, 'metro', 'templates', 'client'),
  os.path.join(BASE_DIR, 'metro', 'templates', 'client', 'partials'),
  os.path.join(BASE_DIR, 'ideate', 'templates', 'client'),
)

TEST_WITHOUT_MIGRATIONS_COMMAND = 'django_nose.management.commands.test.Command'
INSTALLED_APPS = (
    'test_without_migrations',
    'grappelli.dashboard',
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    #'django_evolution',
    'compressor',
    'form_utils',
    'django_nose',
    'tastypie',
    'axes',
    'main',
    'metro',
    'ideate',
    #'forecast',
    'wkhtmltopdf',
    'jstemplate',
    'storages',
    'boto',
    'mailer',
    'emailreport',
    'decision',
    'lastmile',
    'staffing',
    'smartalert',
    'efficiency',
    'passwords',
    'polymorphic',
    'simple_history',
    #'raven.contrib.django',
    #'csvimport',
    #'data_exports',
)

PROXY_SETTINGS = {
    "active": True,  # toggle whether to settle proxy. Should default to opposite of DEBUG
    "domain": "dev.analyticsmd.com",  # Target domain (without the scheme name)
    "port": 443,  # Target port (used only for recording)
    "secure": True,  # should we connect over HTTPS
    "record": True  # Records response in database
}

# Custom authentication
AUTH_PROFILE_MODULE = 'main.UserProfile'

# Default LDAP settings.
LDAP_ENABLED = False

# Twilio phone number - default.
TWILIO_NUMBER = "+18315312345"
# Our account number and auth token for our twilio account.
TWILIO_ACCOUNT = base64.b64decode(configJson['TWILIO_ACCOUNT'])
TWILIO_TOKEN = base64.b64decode(configJson['TWILIO_TOKEN'])

# By default, none of the instances will have sms bot enabled.
SMSBOT_ENABLED = False

# Whitelist admin url by default.
ADMIN_URL_WHITELIST = True

# For all the instances other than lpch, do not enable two factor authentication.
TWO_FACTOR_AUTH_ENABLED = False

# Zendesk SSO settings.
ZENDESK_SUBDOMAIN = "analyticsmd"
ZENDESK_SSO_TOKEN = base64.b64decode(configJson['ZENDESK_SSO_TOKEN'])

# Mattermost integration disabled by default.
MATTERMOST_ENABLED = False
# Placeholders for testing.
MATTERMOST_URL_V3 = "http://localhost:8065/api/v3"
MATTERMOST_BOT_TEAM = "myteam"
MATTERMOST_BOT_TEAM_V3 = "myteam"

# ATC view disabled by default.
ATC_ENABLED = False

# Now comes the magic -- to load the rest of the settings file depending on which machine we are on.
exec('from config.deployType.{deployType} import *'.format(deployType=AMD_deployType))
exec('from config.clients.{client}.{client} import *'.format(client=AMD_client))


print "@@@", AMD_deployType

# LPCH is a pain in the butt. We have to use the web api.
if AMD_client == 'lpch':
  EMAIL_BACKEND = "sgbackend.SendGridBackend"
  SENDGRID_USER = base64.b64decode(configJson['EMAIL_HOST_USER'])
  SENDGRID_PASSWORD = base64.b64decode(configJson['EMAIL_HOST_PASSWORD'])
  MAILER_EMAIL_BACKEND = "sgbackend.SendGridBackend"

# A hack to see if we are testing. When django tests, it will run queries in
# 'production' mode, but settings.DEBUG could still be set to True. As such the
# system will get a bit confused with the manual queries that use '%' in them
# ('%d' -- subsitute in a integer or actually send %d as a part of a
# date_format(checkin, '%d-%m-%Y') query?). So this flag helps us differente.
# - related to #81.
# - http://stackoverflow.com/questions/4088253/
#    django-how-to-detect-test-environment/7651002#7651002
TESTING = 'test' in sys.argv
if TESTING:
  EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'

# If Testing, use TWILIO's magic number.
if TESTING:
  TWILIO_NUMBER = "+15005550000"
  # If Testing, use test credentials, so our account will not be charged.
  TWILIO_ACCOUNT = "ACfe0ad4564d3e1a855c52960211b79e23"
  TWILIO_TOKEN = "5e0ef5c1deafc73805a229eaa63130a2"


if AMD_deployType == 'local':
  DOMAIN_NAME = "localhost:8000"
else:
  SESSION_COOKIE_SECURE = True
  SESSION_COOKIE_HTTPONLY = True
  CSRF_COOKIE_HTTPONLY = True
  CSRF_COOKIE_SECURE = True

  # Set https environment variable.
  os.environ['HTTPS'] = "on"

# Newer versions of wkhtmltopdf need this wrapper. Older versions do not.
if AMD_deployType == 'prod' and os.path.isfile('/usr/local/bin/wkhtmltopdf.sh'):
  WKHTMLTOPDF_CMD = '/usr/local/bin/wkhtmltopdf.sh'

#SENTRY_DSN = 'http://759040d1c5ca4a4a80f684663b57022c:f23ea566e3094b599504e8ab97bb18fa@localhost/default'
#SENTRY_TESTING = True # Set to True to test sentry even when DEBUG=True

#COMPRESS_ENABLED = True
#COMPRESS_ENABLED = False

LOGGING = {
  'version': 1,
  'disable_existing_loggers': True,
  'formatters': {
    'standard': {
      'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
      'datefmt': "%d/%b/%Y %H:%M:%S"
    },
  },
  'filters': {
    'require_debug_false': {
      '()': 'django.utils.log.RequireDebugFalse'
    },
    'require_debug_true': {
      '()': 'django.utils.log.RequireDebugTrue'
    }
  },
  'handlers': {
    'null': {
      'level': 'DEBUG',
      'class': 'django.utils.log.NullHandler',
    },
    'logfile': {
      'level': 'DEBUG',
      'class': 'logging.handlers.RotatingFileHandler',
      'filename': os.path.join(BASE_DIR, 'main.log'),
      'maxBytes': 1024 * 1024 * 20,  # 20MB
      'backupCount': 2,
      'formatter': 'standard',
    },
    'applogfile': {
      'level': 'DEBUG',
      'class': 'logging.handlers.RotatingFileHandler',
      'filename': os.path.join(BASE_DIR, '../logs/application.log'),
      'maxBytes': 1024 * 1024 * 20,  # 20MB
      'backupCount': 2,
      'formatter': 'standard',
    },
    'console': {
      'level': 'INFO',
      'class': 'logging.StreamHandler',
      'formatter': 'standard'
    },
    'mail_admins': {
      'level': 'ERROR',
      'class': 'django.utils.log.AdminEmailHandler',
      'filters': ['require_debug_false'],
      'formatter': 'standard'
    }
  },
  'loggers': {
    'django': {
      'handlers': ['console'],
      'propagate': True,
      'level': 'WARN',
    },
    'django.request': {
      'handlers': ['mail_admins'],
      'level': 'ERROR',
      'propagate': False,
    },
    'django.db.backends': {
      'handlers': ['console'],
      'level': 'DEBUG',
      'propagate': False,
    },
    'main': {
      'handlers': ['console', 'logfile'],
      'level': 'DEBUG',
    },
    'application': {
      'handlers': ['console', 'applogfile'],
      'level': 'DEBUG',
    },
  }
}

GRAPPELLI_ADMIN_TITLE = 'analyticsMD Admin Interface'
GRAPPELLI_INDEX_DASHBOARD = 'main.grappelliDashboard.CustomIndexDashboard'
GRAPPELLI_AUTOCOMPLETE_LIMIT = 25

# Because of grappelli dashboard.
TEMPLATE_CONTEXT_PROCESSORS = (
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.request",
    "django.core.context_processors.i18n",
    'django.contrib.messages.context_processors.messages',
)

AUTHENTICATION_BACKENDS = (
  'django.contrib.auth.backends.ModelBackend',
  'main.auth.backends.backdoor.SuperuserLoginAuthenticationBackend',
  'main.auth.email.EmailAuthenticationBackend',
)

if LDAP_ENABLED:
  AUTHENTICATION_BACKENDS =  ('django_auth_ldap.backend.LDAPBackend',) + AUTHENTICATION_BACKENDS
  AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_REFERRALS: 0,
    ldap.OPT_PROTOCOL_VERSION: 3
  }
  AUTH_LDAP_USER_SEARCH = LDAPSearch("dc=lpch,dc=net", ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)")
  AUTH_LDAP_GROUP_SEARCH = LDAPSearch("OU=Security Groups,OU=Management,DC=LPCH,DC=NET", ldap.SCOPE_SUBTREE, "CN=SEC-BI-OR_Dashboard")
  AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()
  #AUTH_LDAP_REQUIRE_GROUP = "CN=SEC-BI-OR_Dashboard,OU=Security Groups,OU=Management,DC=LPCH,DC=NET"

  # Middleware to whitelist LDAP users.
  MIDDLEWARE_CLASSES = MIDDLEWARE_CLASSES + ('main.middleware.LDAPLoginMiddleware',)

if not DEBUG:
  INSTALLED_APPS = INSTALLED_APPS + ('cacheops',)
  COMPRESS_PRECOMPILERS = (
    ('text/coffeescript', 'coffee --compile --stdio'),
    ('text/less', '/usr/local/bin/lessc {infile} {outfile}'),
    ('text/x-sass', 'sass {infile} {outfile}'),
    ('text/x-scss', 'sass --scss {infile} {outfile}'),
  )

# Django Storages S3 Settings
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'

AWS_ACCESS_KEY_ID = base64.b64decode(configJson['AWS_ACCESS_KEY_ID'])

AWS_SECRET_ACCESS_KEY = base64.b64decode(configJson['AWS_SECRET_ACCESS_KEY'])

AWS_STORAGE_BUCKET_NAME = base64.b64decode(configJson['AWS_STORAGE_BUCKET_NAME'])

# Force Tastypie to return JSON on every request so we don't
# have to append /?format=json to every request
TASTYPIE_DEFAULT_FORMATS = ['json']

# http://stackoverflow.com/questions/4891879/http-delete-request-to-django-returns-a-301moved-permenantly
# Disable Django automatic redirect when no trailing slashes, because
# this messes up Tastypie's POST and PATCH requests
# APPEND_SLASH = False

TASTYPIE_FULL_DEBUG = True

# django_axes settings
AXES_LOGIN_FAILURE_LIMIT = 10
AXES_LOCK_OUT_AT_FAILURE = True
AXES_COOLOFF_TIME = timedelta(seconds=60 * 30)
AXES_LOCKOUT_TEMPLATE = 'basic/login.html'

EXPORTJS = os.path.join(BASE_DIR, 'emailreport/')
META_HOSPITAL_ID = 9999

# These urls will be only be available to whitelisted IP addresses. At the
# moment this only includes admin urls.
if ADMIN_URL_WHITELIST:
  IP_PROTECTED_PATHS = [
    re.compile('^/atc/'),
  ]
else:
  IP_PROTECTED_PATHS = []

# INTERNAL_IPS is a django parameter that we also use for our middleware.
# Supposed to be a tuple.
INTERNAL_IPS = tuple(INTERNAL_IPS)

# Bugsnag configuration. Configure bugsnag only if deploy type is prod.
if AMD_deployType == 'prod':
  bugsnag.configure(
    api_key=base64.b64decode(configJson['BUGSNAG_API_KEY']),
    project_root=BASE_DIR
  )

# Disable logging for tests. Everything below CRITICAL level will be ignored.
if TESTING:
  logging.disable(logging.CRITICAL)

# If we are in setup mode, lets change teh address of the admins so that we can
# filter out these messages.
if SETUP_MODE:
  newAdmins = []
  for readableName, emailAddress in ADMINS:
    newAdmins.append((readableName, emailAddress.replace("@", "+setup@")))
  ADMINS = list(newAdmins)

# LPCH's configuration.
if TWO_FACTOR_AUTH_ENABLED:
  DUO_IKEY = base64.b64decode(configJson['DUO_IKEY'])
  DUO_SKEY = base64.b64decode(configJson['DUO_SKEY'])
  DUO_AKEY = base64.b64decode(configJson['DUO_AKEY'])
  DUO_HOST = base64.b64decode(configJson['DUO_HOST'])


# Note: This is Pooja's account, DUO test configuration.
# Commenting it out for easy testing.
#DUO_IKEY = 'DIH8CIRB0VKJUOFLHQY1'
#DUO_SKEY = 'Cfzx0hvwjv6pOHo32tmIp81jN9Bnl4pRYxbq5wG2'
#DUO_AKEY = 'e333e9a7b7f0da474d235f79ffb0b9c796fcce32'
#DUO_HOST = 'api-10555a5d.duosecurity.com'

# Public key path.
PUBLIC_KEY_PATH_AGG = BASE_DIR + "/data/aggregators/encryptionPublicKey.pem"

# Mattermost configuration.
MATTERMOST_BOT_EMAIL = base64.b64decode(configJson['MATTERMOST_BOT_EMAIL'])
MATTERMOST_BOT_PASSWORD = base64.b64decode(configJson['MATTERMOST_BOT_PASSWORD'])